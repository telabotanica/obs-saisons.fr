{% extends 'base.html.twig' %}

{% block main_content %}

    <div class="rich-text-block">
        {{ page.content|default|raw }}
    </div>

    {% include 'layout/header.html.twig' with ({
        'title': 'Carte des résultats',
        'subtitle': "Cartes et graphiques dynamiques qui vous permettent d’explorer et visualiser les données en temps réel de l’Observatoire des Saisons.<br>
                     <a href=#{path('export')} target=#'_blank' download>Exportez les données de l’Observatoire des Saisons</a>."
    }) %}

    <div class="criteria-container">
        <select name="type-species" id="type-species" class="criteria-list">
            <option value="0" selected class="default-criteria">Tous les types d’espèces</option>
            {% for typeSpecies in allTypeSpecies %}
                <option value="{{ typeSpecies.id }}">{{ typeSpecies.name|capitalize }}</option>
            {% endfor %}
        </select>

        <select name="species" id="species" class="criteria-list" data-selected-type-species="0">
            <option value="0" selected class="default-criteria">Toutes les espèces</option>
            {% for species in allSpecies %}
                <option
                        value="{{ species.id }}"
                        data-events-ids="{{ speciesEvents[species.id] }}"
                        data-type-species-id="{{ species.type.id }}"
                        hidden disabled
                >
                    {{ species.vernacularName }}
                </option>
            {% endfor %}
        </select>

        <select name="events" id="events" class="criteria-list">
            <option value="0" selected class="default-criteria">Tous les évènements</option>
            {% for event in events %}
                <option value="{{ event.id }}">{{ event.name|capitalize }} {{ event.stadeBbch }}</option>
            {% endfor %}
        </select>

        <select name="year" id="year" class="criteria-list">
            {% for i in minYear..'now'|date('Y') %}
                <option value="{{ i }}"{% if loop.last %} selected{% endif %}>{{ i }}</option>
            {% endfor %}
        </select>

        <select name="region" id="region" class="criteria-list">
            <option value="0">Toutes les régions</option>
            {% for id, region in regions %}
                <option value="{{ id }}">{{ region }}</option>
            {% endfor %}
        </select>

        <select name="department" id="department" class="criteria-list">
            <option value="0">Tous les départements</option>
            {% for id, department in departments %}
                <option value="{{ id }}">{{ department }}</option>
            {% endfor %}
        </select>
    </div>

    <div id="results-map" class="result-map"></div>

    <script>
        let dataRoute = "{{ path('export_filtered')|escape('js') }}";
        let stationUrlTemplate = "{{ path('stations_show', {slug: 'slugPlaceHolder'})|escape('js') }}";
    </script>


    {% include 'layout/header.html.twig' with ({
        'title': 'Calendrier phénologique par espèce',
        'subtitle': 'Ces graphiques représentent les données brutes saisies par les observateur.rice.s.'
    }) %}

    <div id="phenological-chart-container">
        <select name="species" id="species-phenological-chart" class="criteria-list">
            <option value="0" class="default-criteria" disabled>Choisissez une espèce</option>
            {% for species in allSpecies %}
                <option
                        value="{{ species.id }}"
                        {% if 'Lilas' == species.vernacularName %} selected{% endif %}
                >
                    {{ species.vernacularName }}
                </option>
            {% endfor %}
        </select>

        <select name="year" id="year-phenological-chart" class="criteria-list">
            <option value="0">Toutes les années</option>
            {% for i in minYear..'now'|date('Y') %}*
                <option value="{{ i }}">{{ i }}</option>
            {% endfor %}
        </select>

        <select name="region" id="region-phenological-chart" class="criteria-list">
            <option value="0">Toutes les régions</option>
            {% for id, region in regions %}
                <option value="{{ id }}">{{ region }}</option>
            {% endfor %}
        </select>

        <select name="department" id="department-phenological-chart" class="criteria-list">
            <option value="0">Tous les départements</option>
            {% for id, department in departments %}
                <option value="{{ id }}">{{ department }}</option>
            {% endfor %}
        </select>

        <div class="no-data alert alert-danger">Aucune donnée pour les critères demandés, veuillez modifier au
            moins un de vos critères
        </div>
        <div class="chart"></div>
    </div>

    {% include 'layout/header.html.twig' with ({
        'title': 'Évolution des stades par espèce'
    }) %}

    <div id="evolution-chart-container" data-min-year="{{ minYear }}">
        <select name="species" id="species-evolution-chart" class="criteria-list">
            <option value="0" class="default-criteria" disabled>Choisissez une espèce</option>
            {% for species in allSpecies %}
                <option
                        value="{{ species.id }}"
                        data-events-ids="{{ speciesEvents[species.id] }}"
                        {% if 'Marronnier' == species.vernacularName %} selected{% endif %}
                >
                    {{ species.vernacularName }}
                </option>
            {% endfor %}
        </select>
        <select name=event id="event-evolution-chart" class="criteria-list">
            <option value="0" class="default-criteria" disabled>Choisissez un évènement</option>
            {% for eventName, eventIds in eventsIds %}
                <option
                        value="{{ eventIds|join(',') }}"
                        {% if 'feuillaison' == eventName %} selected{% endif %}
                >
                    {{ eventName|capitalize }}
                </option>
            {% endfor %}
        </select>

        <select name="region" id="region-evolution-chart" class="criteria-list">
            <option value="0">Toutes les régions</option>
            {% for id, region in regions %}
                <option value="{{ id }}">{{ region }}</option>
            {% endfor %}
        </select>

        <select name="department" id="department-evolution-chart" class="criteria-list">
            <option value="0">Tous les départements</option>
            {% for id, department in departments %}
                <option value="{{ id }}">{{ department }}</option>
            {% endfor %}
        </select>

        <div class="no-data alert alert-danger">Aucune donnée pour les critères demandés, veuillez modifier au
            moins un de vos critères
        </div>
        <div class="chart"></div>
    </div>


    <script>
        let exportRoute = "{{ path('export_filtered')|escape('js') }}";
        let eventsEvolutionRoute = "{{ path('events_evolution')|escape('js') }}";
    </script>
    <div class="container mt-5" id="observation-calendar-chart">
        <h2>Observation des espèces au cours des années</h2>
            <div class="mb-3 selectMultiple" id="selectMultiple" data-placeholder="Select species">
                <label for="species" class="form-label">Filtrer par espèces</label>
                    <select name="species[]" id="species-calendar-chart" class="form-select criteria-list" multiple>
                        {% for specie in allSpecies %}
                            <option value="{{ specie.id }}" {% if specie.id in selectedSpeciesIds %}selected{% endif %}>
                                {{ specie.vernacularName }}
                            </option>
                        {% endfor %}
                    </select>
            </div>
            <div class="mb-3 selectMultiple" id="selectMultiple" data-placeholder="Select event">
                <label for="event" class="form-label">Filtrer par stade</label>
                <div>
                    <select class="form-select criteria-list" name="event[]" multiple id="event-calendar-chart">
                        <option value="1">Tous stades</option>
                        {% for event in events %}
                            <option value="{{ event.id }}" {% if event.id in selectedEventId %}selected{% endif %}>
                                {{ event.name }}{% if event.stadeBbch is not empty %} - {{ event.stadeBbch }}{% endif %}
                            </option>
                        {% endfor %}
                    </select>
                </div>
            </div>
            <div class="mb-3 selectMultiple" id="selectMultiple" data-placeholder="Select year">
                <label for="year" class="form-label">Filtrer par année</label>
                <div>
                    <select class="form-select criteria-list" name="year[]" multiple id="year-calendar-chart">
                        <option value="1">Toutes années</option>
                        {% for i in minYear..'now'|date('Y') %}
                            <option value="{{ i }}" {% if i in selectedYear %}selected{% endif %}>
                                {{ i }}
                            </option>
                        {% endfor %}
                    </select>
                </div>
            </div>
        {% if observations is empty %}
            <div class="alert alert-danger">
                Aucune donnée pour les critères demandés, veuillez modifier au moins un de vos critères
            </div>
        {% endif %}

    <div id="combinedYearChart" class="mt-5"></div>
    <div id="combinedSelectedYearChart" class="mt-5"></div>
    </div>
    <script>
        let calendarRoute = "{{ path('calender_data')|escape('js') }}";
    </script>
    <div id="multipleChart" class="mt-5"></div>


{#    <script id="observations-data" type="application/json">{{ observations }}</script>#}
{#    <script id="observations-by-year-data" type="application/json">{{ observations|json_encode()|raw }}</script>#}


{#    <!-- Include the external JavaScript file -->#}
{#    <script src="../../assets/ui/observation-calendar-chart.js"></script>#}
{#    <script>#}
{#        const selectedYears = {{ selectedYear|json_encode|raw }}; // Assuming selectedYear is properly defined in your template#}
{#    </script>#}


{#    <script>#}
{#        // Initialize the selectMultiple dropdown#}
{#        $(document).ready(function () {#}
{#            function initializeSelectMultiple(selector, multiple = true) {#}
{#                const select = $(selector);#}
{#                const options = select.find('option');#}
{#                const placeholder = select.closest('.selectMultiple').data('placeholder');#}

{#                const div = $('<div />').addClass('selectMultiple');#}
{#                const active = $('<div />');#}
{#                const list = $('<ul />');#}
{#                const span = $('<span />').text(placeholder).appendTo(active);#}

{#                options.each(function () {#}
{#                    const text = $(this).text();#}
{#                    if ($(this).is(':selected')) {#}
{#                        active.append($('<a />').html(`<em>${text}</em><i></i>`));#}
{#                        span.addClass('hide');#}
{#                    } else {#}
{#                        list.append($('<li />').text(text));#}
{#                    }#}
{#                });#}

{#                $(document).on('click', function (e) {#}
{#                    const target = $(e.target);#}
{#                    if (!target.closest('.selectMultiple').length) {#}
{#                        $('.selectMultiple').removeClass('open');#}
{#                    }#}
{#                });#}

{#                active.append($('<div />').addClass('arrow'));#}
{#                div.append(active).append(list);#}

{#                select.wrap(div);#}

{#                $(document).on('click', '.selectMultiple ul li', function () {#}
{#                    const select = $(this).closest('.selectMultiple');#}
{#                    const li = $(this);#}
{#                    if (!select.hasClass('clicked')) {#}
{#                        select.addClass('clicked');#}
{#                        li.prev().addClass('beforeRemove');#}
{#                        li.next().addClass('afterRemove');#}
{#                        li.addClass('remove');#}

{#                        // For single selection, check if there is already a selected item#}
{#                        if (!multiple && select.find('a').length > 0) {#}
{#                            // Remove the existing selected item#}
{#                            select.find('a').each(function () {#}
{#                                const a = $(this);#}
{#                                const text = a.find('em').text();#}
{#                                select.find('option').filter(function () {#}
{#                                    return $(this).text() === text;#}
{#                                }).prop('selected', false);#}
{#                                a.remove();#}
{#                            });#}
{#                        }#}

{#                        const a = $('<a />').addClass('notShown').html(`<em>${li.text()}</em><i></i>`).hide().appendTo(select.children('div'));#}
{#                        a.slideDown(400, function () {#}
{#                            setTimeout(function () {#}
{#                                a.addClass('shown');#}
{#                                select.children('div').children('span').addClass('hide');#}
{#                                select.find('option').filter(function () {#}
{#                                    return $(this).text() === li.text();#}
{#                                }).prop('selected', true);#}
{#                            }, 500);#}
{#                        });#}

{#                        setTimeout(function () {#}
{#                            li.prev().removeClass('beforeRemove');#}
{#                            li.next().removeClass('afterRemove');#}
{#                            li.slideUp(400, function () {#}
{#                                li.remove();#}
{#                                select.removeClass('clicked');#}
{#                            });#}
{#                        }, 600);#}
{#                    }#}
{#                });#}

{#                $(document).on('click', '.selectMultiple > div a', function () {#}
{#                    const select = $(this).closest('.selectMultiple');#}
{#                    const self = $(this);#}
{#                    self.removeClass().addClass('remove');#}
{#                    select.addClass('open');#}
{#                    setTimeout(function () {#}
{#                        self.addClass('disappear');#}
{#                        setTimeout(function () {#}
{#                            self.animate({#}
{#                                width: 0,#}
{#                                height: 0,#}
{#                                padding: 0,#}
{#                                margin: 0#}
{#                            }, 300, function () {#}
{#                                const li = $('<li />').text(self.children('em').text()).addClass('notShown').appendTo(select.find('ul'));#}
{#                                li.slideDown(400, function () {#}
{#                                    li.addClass('show');#}
{#                                    setTimeout(function () {#}
{#                                        select.find('option').filter(function () {#}
{#                                            return $(this).text() === self.children('em').text();#}
{#                                        }).prop('selected', false);#}
{#                                        if (!select.find('option:selected').length) {#}
{#                                            select.children('div').children('span').removeClass('hide');#}
{#                                        }#}
{#                                        li.removeClass();#}
{#                                    }, 400);#}
{#                                });#}
{#                                self.remove();#}
{#                            })#}
{#                        }, 300);#}
{#                    }, 400);#}
{#                });#}

{#                $(document).on('click', '.selectMultiple > div .arrow, .selectMultiple > div span', function () {#}
{#                    $(this).closest('.selectMultiple').toggleClass('open');#}
{#                });#}
{#            }#}

{#            // Initialize species selector#}
{#            initializeSelectMultiple('#species-calendar-chart', true);#}

{#            // Initialize event and year selectors#}
{#            initializeSelectMultiple('#event-calendar-chart', false);#}
{#            initializeSelectMultiple('#year-calendar-chart', false);#}
{#        });#}

{#        const observationByYearSelected = [];#}
{#        {% for observation in observations %}#}
{#        {% if observation.date|date('Y') in selectedYear %}#}
{#        observationByYearSelected.push({#}
{#            date: "{{ observation.date|date('d-m-y') }}",#}
{#            event: "{{ observation.event.name }} {{ observation.event.stadeBbch }}",#}
{#            eventObsName: "{{ observation.event.name }}",#}
{#            espece: "{{ observation.individual.species.vernacularName }}"#}
{#        });#}
{#        {% endif %}#}
{#        {% endfor %}#}

{#        const observation = [];#}
{#        {% for observation in observations %}#}
{#        observation.push({#}
{#            date: "{{ observation.date|date('d-m-y') }}",#}
{#            event: "{{ observation.event.name }} {{ observation.event.stadeBbch }}",#}
{#            eventObsName: "{{ observation.event.name }}",#}
{#            espece: "{{ observation.individual.species.vernacularName }}"#}
{#        });#}
{#        {% endfor %}#}

{#        if (observation.length === 0) {#}
{#            document.querySelector(".no-data").style.display = "block";#}
{#        } else {#}

{#            // Function to compute density and assign opacity#}
{#            function computeDensity(data) {#}
{#                const density = {};#}

{#                // Compute the density for each event and date#}
{#                data.forEach(d => {#}
{#                    const key = `${d.espece} - ${d.event}`;#}
{#                    const date = d.date.toDateString();#}
{#                    if (!density[key]) {#}
{#                        density[key] = {};#}
{#                    }#}
{#                    if (!density[key][date]) {#}
{#                        density[key][date] = 0;#}
{#                    }#}
{#                    density[key][date]++;#}
{#                });#}

{#                // Find the maximum density for each event#}
{#                const maxDensity = {};#}
{#                for (const key in density) {#}
{#                    maxDensity[key] = Math.max(...Object.values(density[key]));#}
{#                }#}

{#                // Calculate opacity based on density#}
{#                const opacityData = data.map(d => {#}
{#                    const key = `${d.espece} - ${d.event}`;#}
{#                    const date = d.date.toDateString();#}
{#                    const count = density[key][date];#}
{#                    const maxCount = maxDensity[key];#}

{#                    // Ensure a minimum opacity if maxCount is less than 20#}
{#                    const minOpacity = 0.50; // Set your desired minimum opacity here#}
{#                    let opacity = (count / maxCount) * 100; // Scale opacity from 0 to 100#}
{#                    if (maxCount < 20) {#}
{#                        opacity = Math.max(opacity, minOpacity * 100); // Scale minOpacity to percentage#}
{#                    }#}

{#                    return {#}
{#                        ...d,#}
{#                        key: key,#}
{#                        opacity: opacity,#}
{#                        count: count // Include count for tooltip#}
{#                    };#}
{#                });#}

{#                return opacityData;#}
{#            }#}

{#// Define colorByEvent function#}
{#            function colorByEvent(event) {#}
{#                switch (event.toLowerCase().trim()) {  // Ensure case-insensitivity#}
{#                    case "feuillaison 11":#}
{#                    case "feuillaison 15":#}
{#                        return "#BCD35F";#}
{#                    case "floraison 61":#}
{#                    case "floraison 65":#}
{#                        return "#5FBCD3";#}
{#                    case "fructification 85":#}
{#                        return "#F9872F";#}
{#                    case "sénescence 91":#}
{#                    case "sénescence 95":#}
{#                        return "#C83737";#}
{#                    case "1ère apparition":#}
{#                        return "#C885B8";#}
{#                    default:#}
{#                        return "black";#}
{#                }#}
{#            }#}

{#// Combined Year Chart function#}
{#            function combinedYearChart(data) {#}
{#                // Parse the date / time#}
{#                const parseDate = d3.timeParse("%d-%m-%y");#}

{#                // Convert dates and prepare data#}
{#                data.forEach(function (d) {#}
{#                    d.date = parseDate(d.date);#}
{#                });#}

{#                // Compute density and assign opacity#}
{#                const densityData = computeDensity(data);#}

{#                // Set the dimensions and margins of the graph#}
{#                const margin = {top: 70, right: 30, bottom: 50, left: 200}, // Adjusted left margin#}
{#                    heightPerEvent = 10,#}
{#                    width = 600;#}

{#                // Determine the range of dates and unique event-species combinations#}
{#                const eventSpecies = Array.from(new Set(densityData.map(d => d.key)));#}

{#                // Calculate the height based on the number of unique event-species combinations#}
{#                const height = 400 + eventSpecies.length * heightPerEvent - margin.top - margin.bottom;#}

{#                // Append the svg object to the body of the page#}
{#                const svg = d3.select("#singleChart")#}
{#                    .append("svg")#}
{#                    .attr("width", width + margin.left + margin.right)#}
{#                    .attr("height", height + margin.top + margin.bottom)#}
{#                    .append("g")#}
{#                    .attr("transform", "translate(" + margin.left + "," + (margin.top + 30) + ")");#}

{#                // Set the ranges for a single year span (from January 1 to December 31)#}
{#                const year = 2024; // Using a leap year to cover 366 days#}
{#                const x = d3.scaleTime().domain([new Date(year, 0, 1), new Date(year, 11, 31)]).range([0, width]);#}
{#                const y = d3.scaleBand().domain(eventSpecies).range([0, height]).padding(0.1);#}

{#                // Add vertical grid lines#}
{#                svg.selectAll("line.vertical-grid")#}
{#                    .data(x.ticks(d3.timeMonth))#}
{#                    .enter()#}
{#                    .append("line")#}
{#                    .attr("class", "vertical-grid")#}
{#                    .attr("x1", function (d) {#}
{#                        return x(d);#}
{#                    })#}
{#                    .attr("x2", function (d) {#}
{#                        return x(d);#}
{#                    })#}
{#                    .attr("y1", 0)#}
{#                    .attr("y2", height)#}
{#                    .attr("stroke", "#000")#}
{#                    .attr("stroke-dasharray", "2,2");#}

{#                // Add the X Axis#}
{#                svg.append("g")#}
{#                    .attr("transform", "translate(0," + height + ")")#}
{#                    .call(d3.axisBottom(x).ticks(d3.timeMonth).tickFormat(d3.timeFormat("%b")))#}
{#                    .selectAll("text")#}
{#                    .style("font-size", "14px"); // Adjust the font size#}

{#                // Add the Y Axis#}
{#                svg.append("g")#}
{#                    .call(d3.axisLeft(y))#}
{#                    .selectAll("text")#}
{#                    .attr("transform", "translate(-10,0)") // Move text slightly to the left#}
{#                    .style("text-anchor", "end")// Align text to the end of the axis#}
{#                    .style("font-size", "12px"); // Adjust the font size#}

{#                // Add tooltip div#}
{#                const tooltip = d3.select("body").append("div")#}
{#                    .attr("class", "tooltip")#}
{#                    .style("opacity", 0);#}

{#                // Add squares#}
{#                const squareSize = 10; // Define the size of the squares#}

{#                svg.selectAll("rect")#}
{#                    .data(densityData)#}
{#                    .enter().append("rect")#}
{#                    .attr("x", function (d) {#}
{#                        // Map the dates to the selected year for x-axis positioning#}
{#                        const mappedDate = new Date(year, d.date.getMonth(), d.date.getDate());#}
{#                        return x(mappedDate) - squareSize / 2; // Center the square#}
{#                    })#}
{#                    .attr("y", function (d) {#}
{#                        return y(d.key) + y.bandwidth() / 2 - squareSize / 2;#}
{#                    }) // Center the square#}
{#                    .attr("width", 3)#}
{#                    .attr("height", 17)#}
{#                    .style("fill", function (d) {#}
{#                        return colorByEvent(d.event);#}
{#                    }) // Use the colorByEvent function#}
{#                    .style("opacity", function (d) {#}
{#                        return d.opacity / 100;#}
{#                    }) // Use computed opacity#}
{#                    .style("stroke-width", 0) // Initially no border#}
{#                    .on("mouseover", function (event, d) {#}
{#                        d3.select(this)#}
{#                            .style("stroke", "black")#}
{#                            .style("stroke-width", 2);#}
{#                        tooltip.transition()#}
{#                            .duration(200)#}
{#                            .style("opacity", .9);#}
{#                        tooltip.html(d.espece + "<br/>" + d.event + "<br/>" + d3.timeFormat("%d/%m")(d.date) + "<br/>" + d.count + " donnée(s)")#}
{#                            .style("left", (event.pageX + 5) + "px")#}
{#                            .style("top", (event.pageY - 28) + "px");#}
{#                    })#}
{#                    .on("mouseout", function (d) {#}
{#                        d3.select(this)#}
{#                            .style("stroke-width", 0); // Remove border on mouse out#}
{#                        tooltip.transition()#}
{#                            .duration(500)#}
{#                            .style("opacity", 0);#}
{#                    });#}

{#                // Add the title above the graph#}
{#                svg.append("text")#}
{#                    .attr("x", width / 2)#}
{#                    .attr("y", -50) // Position the title above the graph#}
{#                    .attr("text-anchor", "middle")#}
{#                    .style("font-size", "16px")#}
{#                    .style("font-weight", "bold")#}
{#                    .text("Observations sur l'ensemble des années");#}
{#            }#}

{#            function combinedSelectedYearChart(data) {#}
{#                // Parse the date / time#}
{#                const parseDate = d3.timeParse("%d-%m-%y");#}

{#                // Convert dates and prepare data#}
{#                data.forEach(function (d) {#}
{#                    d.date = parseDate(d.date);#}
{#                });#}

{#                // Compute density and assign opacity#}
{#                const densityData = computeDensity(data);#}

{#                // Set the dimensions and margins of the graph#}
{#                const margin = {top: 70, right: 30, bottom: 50, left: 200}, // Adjusted left margin#}
{#                    heightPerEvent = 10,#}
{#                    width = 600;#}

{#                // Determine the range of dates and unique event-species combinations#}
{#                const eventSpecies = Array.from(new Set(densityData.map(d => d.key)));#}

{#                // Calculate the height based on the number of unique event-species combinations#}
{#                const height = 400 + eventSpecies.length * heightPerEvent - margin.top - margin.bottom;#}

{#                // Append the svg object to the body of the page#}
{#                const svg = d3.select("#combinedSelectedYearChart")#}
{#                    .append("svg")#}
{#                    .attr("width", width + margin.left + margin.right)#}
{#                    .attr("height", height + margin.top + margin.bottom)#}
{#                    .append("g")#}
{#                    .attr("transform", "translate(" + margin.left + "," + (margin.top + 30) + ")");#}

{#                // Set the ranges for a single year span (from January 1 to December 31)#}
{#                const year = 2024; // Using a leap year to cover 366 days#}
{#                const x = d3.scaleTime().domain([new Date(year, 0, 1), new Date(year, 11, 31)]).range([0, width]);#}
{#                const y = d3.scaleBand().domain(eventSpecies).range([0, height]).padding(0.1);#}

{#                // Add vertical grid lines#}
{#                svg.selectAll("line.vertical-grid")#}
{#                    .data(x.ticks(d3.timeMonth))#}
{#                    .enter()#}
{#                    .append("line")#}
{#                    .attr("class", "vertical-grid")#}
{#                    .attr("x1", function (d) {#}
{#                        return x(d);#}
{#                    })#}
{#                    .attr("x2", function (d) {#}
{#                        return x(d);#}
{#                    })#}
{#                    .attr("y1", 0)#}
{#                    .attr("y2", height)#}
{#                    .attr("stroke", "#000")#}
{#                    .attr("stroke-dasharray", "2,2");#}

{#                // Add the X Axis#}
{#                svg.append("g")#}
{#                    .attr("transform", "translate(0," + height + ")")#}
{#                    .call(d3.axisBottom(x).ticks(d3.timeMonth).tickFormat(d3.timeFormat("%b")))#}
{#                    .selectAll("text")#}
{#                    .style("font-size", "14px"); // Adjust the font size#}

{#                // Add the Y Axis#}
{#                svg.append("g")#}
{#                    .call(d3.axisLeft(y))#}
{#                    .selectAll("text")#}
{#                    .attr("transform", "translate(-10,0)") // Move text slightly to the left#}
{#                    .style("text-anchor", "end")// Align text to the end of the axis#}
{#                    .style("font-size", "12px"); // Adjust the font size#}

{#                // Add tooltip div#}
{#                const tooltip = d3.select("body").append("div")#}
{#                    .attr("class", "tooltip")#}
{#                    .style("opacity", 0);#}

{#                // Add squares#}
{#                const squareSize = 10; // Define the size of the squares#}

{#                svg.selectAll("rect")#}
{#                    .data(densityData)#}
{#                    .enter().append("rect")#}
{#                    .attr("x", function (d) {#}
{#                        // Map the dates to the selected year for x-axis positioning#}
{#                        const mappedDate = new Date(year, d.date.getMonth(), d.date.getDate());#}
{#                        return x(mappedDate) - squareSize / 2; // Center the square#}
{#                    })#}
{#                    .attr("y", function (d) {#}
{#                        return y(d.key) + y.bandwidth() / 2 - squareSize / 2;#}
{#                    }) // Center the square#}
{#                    .attr("width", 3)#}
{#                    .attr("height", 17)#}
{#                    .style("fill", function (d) {#}
{#                        return colorByEvent(d.event);#}
{#                    }) // Use the colorByEvent function#}
{#                    .style("opacity", function (d) {#}
{#                        return d.opacity / 100;#}
{#                    }) // Use computed opacity#}
{#                    .style("stroke-width", 0) // Initially no border#}
{#                    .on("mouseover", function (event, d) {#}
{#                        d3.select(this)#}
{#                            .style("stroke", "black")#}
{#                            .style("stroke-width", 2);#}
{#                        tooltip.transition()#}
{#                            .duration(200)#}
{#                            .style("opacity", .9);#}
{#                        tooltip.html(d.espece + "<br/>" + d.event + "<br/>" + d3.timeFormat("%d/%m")(d.date) + "<br/>" + d.count + " donnée(s)")#}
{#                            .style("left", (event.pageX + 5) + "px")#}
{#                            .style("top", (event.pageY - 28) + "px");#}
{#                    })#}
{#                    .on("mouseout", function (d) {#}
{#                        d3.select(this)#}
{#                            .style("stroke-width", 0); // Remove border on mouse out#}
{#                        tooltip.transition()#}
{#                            .duration(500)#}
{#                            .style("opacity", 0);#}
{#                    });#}

{#                // Add the title above the graph#}
{#                svg.append("text")#}
{#                    .attr("x", width / 2)#}
{#                    .attr("y", -50) // Position the title above the graph#}
{#                    .attr("text-anchor", "middle")#}
{#                    .style("font-size", "16px")#}
{#                    .style("font-weight", "bold")#}
{#                    .text("Observations sur l'ensemble des années sélectionnées");#}
{#            }#}

{#            function eachYearChart(data) {#}

{#                data = data.filter(d => d.date && !isNaN(new Date(d.date)));#}
{#                // Extract years from the data#}
{#                const years = Array.from(new Set(data.map(d => new Date(d.date).getFullYear())));#}

{#                // Sort years in descending order#}
{#                years.sort((a, b) => b - a);  // Sort in descending order (most recent year first)#}

{#                // Iterate over each year to generate charts#}
{#                years.forEach(year => {#}
{#                    // Filter data for the current year#}
{#                    const yearData = data.filter(d => new Date(d.date).getFullYear() === year);#}

{#                    // Generate chart for the current year#}
{#                    generateGraphForYear(year, yearData);#}
{#                });#}
{#            }#}

{#// Function to generate a graph for a specific year#}
{#            function generateGraphForYear(year, data) {#}

{#                // Parse the date / time#}
{#                const parseDate = d3.timeParse("%d-%m-%y");#}

{#                // Convert dates and prepare data#}
{#                data.forEach(function (d) {#}
{#                    d.date = parseDate(d.date);#}
{#                });#}

{#                // Compute density and assign opacity#}
{#                const densityData = computeDensity(data);#}

{#                // Set the dimensions and margins of the graph#}
{#                const margin = {top: 70, right: 30, bottom: 50, left: 200}, // Adjusted left margin#}
{#                    heightPerEvent = 10,#}
{#                    width = 500;#}

{#                // Determine the range of dates and unique event-species combinations#}
{#                const eventSpecies = Array.from(new Set(densityData.map(d => d.key)));#}

{#                // Calculate the height based on the number of unique event-species combinations#}
{#                const height = 400 + eventSpecies.length * heightPerEvent - margin.top - margin.bottom;#}

{#                // Append the svg object to the body of the page#}
{#                const svg = d3.select("#multipleChart")#}
{#                    .append("svg")#}
{#                    .attr("width", width + margin.left + margin.right)#}
{#                    .attr("height", height + margin.top + margin.bottom + 30) // Additional height for title#}
{#                    .append("g")#}
{#                    .attr("transform", "translate(" + margin.left + "," + (margin.top + 30) + ")"); // Adjusted transformation to fit title#}

{#                // Add the title on top of the graph#}
{#                svg.append("text")#}
{#                    .attr("x", width / 2)#}
{#                    .attr("y", -30) // Position the title above the graph#}
{#                    .attr("text-anchor", "middle")#}
{#                    .style("font-size", "16px")#}
{#                    .style("font-weight", "bold")#}
{#                    .text(`Observations pour l'année ${year}`);#}

{#                // Set the ranges for a single year span (from January 1 to December 31)#}
{#                const x = d3.scaleTime().domain([new Date(year, 0, 1), new Date(year, 11, 31)]).range([0, width]);#}
{#                const y = d3.scaleBand().domain(eventSpecies).range([0, height]).padding(0.1);#}

{#                // Add vertical grid lines#}
{#                svg.selectAll("line.vertical-grid")#}
{#                    .data(x.ticks(d3.timeMonth))#}
{#                    .enter()#}
{#                    .append("line")#}
{#                    .attr("class", "vertical-grid")#}
{#                    .attr("x1", function(d) { return x(d); })#}
{#                    .attr("x2", function(d) { return x(d); })#}
{#                    .attr("y1", 0)#}
{#                    .attr("y2", height)#}
{#                    .attr("stroke", "#ccc")#}
{#                    .attr("stroke-dasharray", "2,2");#}

{#                // Add the X Axis#}
{#                svg.append("g")#}
{#                    .attr("transform", "translate(0," + height + ")")#}
{#                    .call(d3.axisBottom(x).ticks(d3.timeMonth).tickFormat(d3.timeFormat("%b")))#}
{#                    .selectAll("text")#}
{#                    .style("font-size", "14px"); // Adjust the font size for X axis labels#}

{#                // Add the Y Axis#}
{#                svg.append("g")#}
{#                    .call(d3.axisLeft(y))#}
{#                    .selectAll("text")#}
{#                    .attr("transform", "translate(-10,0)") // Move text slightly to the left#}
{#                    .style("text-anchor", "end") // Align text to the end of the axis#}
{#                    .style("font-size", "14px"); // Adjust the font size for Y axis labels#}

{#                // Add tooltip div#}
{#                const tooltip = d3.select("body").append("div")#}
{#                    .attr("class", "tooltip")#}
{#                    .style("opacity", 0);#}

{#                // Add squares#}
{#                const squareSize = 10; // Define the size of the squares#}

{#                svg.selectAll("rect")#}
{#                    .data(densityData)#}
{#                    .enter().append("rect")#}
{#                    .attr("x", function(d) {#}
{#                        // Map the dates to the selected year for x-axis positioning#}
{#                        const mappedDate = new Date(year, d.date.getMonth(), d.date.getDate());#}
{#                        return x(mappedDate) - squareSize / 2; // Center the square#}
{#                    })#}
{#                    .attr("y", function(d) { return y(d.key) + y.bandwidth() / 2 - squareSize / 2; }) // Center the square#}
{#                    .attr("width", 5)#}
{#                    .attr("height",17)#}
{#                    .style("fill", function(d) { return colorByEvent(d.event); }) // Use the colorByEvent function#}
{#                    .style("opacity", function(d) { return d.opacity / 100; }) // Use computed opacity#}
{#                    .style("stroke-width", 0) // Initially no border#}
{#                    .on("mouseover", function(event, d) {#}
{#                        d3.select(this)#}
{#                            .style("stroke", "black")#}
{#                            .style("stroke-width", 2);#}
{#                        tooltip.transition()#}
{#                            .duration(200)#}
{#                            .style("opacity", .9);#}
{#                        tooltip.html("Species: " + d.espece + "<br/>Event: " + d.event + "<br/>Date: " + d3.timeFormat("%d/%m")(d.date) + "<br/>Count: " + d.count)#}
{#                            .style("left", (event.pageX + 5) + "px")#}
{#                            .style("top", (event.pageY - 28) + "px");#}
{#                    })#}
{#                    .on("mouseout", function(d) {#}
{#                        d3.select(this)#}
{#                            .style("stroke-width", 0); // Remove border on mouse out#}
{#                        tooltip.transition()#}
{#                            .duration(500)#}
{#                            .style("opacity", 0);#}
{#                    });#}
{#            }#}

{#// Call the function to create the charts#}
{#            combinedYearChart(observation);#}


{#            function checkMultipleYears(){#}
{#                if ({{ selectedYear|length }} > 1){#}
{#                    eachYearChart(observationByYearSelected);#}
{#                    console.log({{ selectedYear|length }})#}
{#                    // combinedSelectedYearChart(observationByYearSelected);#}
{#                }#}
{#            }#}

{#            checkMultipleYears();#}

{#        }#}
{#    </script>#}

{#    <style>#}
{#        .selectMultiple select {#}
{#            display: none;#}
{#        }#}

{#        .selectMultiple > div {#}
{#            position: relative;#}
{#            padding: 8px 12px 2px;#}
{#            border-radius: 8px;#}
{#            background: #fff;#}
{#            font-size: 14px;#}
{#            min-height: 44px;#}
{#            box-shadow: 0 4px 16px rgba(22, 42, 90, 0.12);#}
{#            transition: box-shadow 0.3s ease;#}
{#        }#}

{#        .selectMultiple > div:hover {#}
{#            box-shadow: 0 4px 24px -1px rgba(22, 42, 90, 0.20);#}
{#        }#}

{#        .selectMultiple > div .arrow {#}
{#            position: absolute;#}
{#            right: 1px;#}
{#            top: 0;#}
{#            bottom: 0;#}
{#            cursor: pointer;#}
{#            width: 28px;#}
{#        }#}

{#        .selectMultiple > div .arrow:before,#}
{#        .selectMultiple > div .arrow:after {#}
{#            content: '';#}
{#            position: absolute;#}
{#            width: 2px;#}
{#            height: 8px;#}
{#            border-bottom: 8px solid #99A3BA;#}
{#            top: 43%;#}
{#            transition: all 0.3s ease;#}
{#        }#}

{#        .selectMultiple > div .arrow:before {#}
{#            right: 12px;#}
{#            transform: rotate(-130deg);#}
{#        }#}

{#        .selectMultiple > div .arrow:after {#}
{#            left: 9px;#}
{#            transform: rotate(130deg);#}
{#        }#}

{#        .selectMultiple > div span {#}
{#            color: #99A3BA;#}
{#            display: block;#}
{#            position: absolute;#}
{#            left: 12px;#}
{#            cursor: pointer;#}
{#            top: 8px;#}
{#            line-height: 28px;#}
{#            transition: all 0.3s ease;#}
{#        }#}

{#        .selectMultiple > div span.hide {#}
{#            opacity: 0;#}
{#            visibility: hidden;#}
{#            transform: translate(-4px, 0);#}
{#        }#}

{#        .selectMultiple > div a {#}
{#            position: relative;#}
{#            padding: 0 24px 6px 8px;#}
{#            line-height: 28px;#}
{#            color: #1E2330;#}
{#            display: inline-block;#}
{#            vertical-align: top;#}
{#            margin: 0 6px 0 0;#}
{#        }#}

{#        .selectMultiple > div a em {#}
{#            font-style: normal;#}
{#            display: block;#}
{#            white-space: nowrap;#}
{#        }#}

{#        .selectMultiple > div a:before {#}
{#            content: '';#}
{#            position: absolute;#}
{#            left: 0;#}
{#            top: 0;#}
{#            bottom: 6px;#}
{#            width: 100%;#}
{#            background: rgba(228, 236, 250, 0.7);#}
{#            z-index: -1;#}
{#            border-radius: 4px;#}
{#        }#}

{#        .selectMultiple > div a i {#}
{#            cursor: pointer;#}
{#            position: absolute;#}
{#            top: 0;#}
{#            right: 0;#}
{#            width: 24px;#}
{#            height: 28px;#}
{#        }#}

{#        .selectMultiple > div a i:before,#}
{#        .selectMultiple > div a i:after {#}
{#            content: '';#}
{#            width: 2px;#}
{#            height: 10px;#}
{#            position: absolute;#}
{#            left: 50%;#}
{#            top: 50%;#}
{#            background: #bcd35f;#}
{#            border-radius: 1px;#}
{#        }#}

{#        .selectMultiple > div a i:before {#}
{#            transform: translate(-50%, -50%) rotate(45deg);#}
{#        }#}

{#        .selectMultiple > div a i:after {#}
{#            transform: translate(-50%, -50%) rotate(-45deg);#}
{#        }#}

{#        .selectMultiple > div a.notShown {#}
{#            opacity: 0;#}
{#            transition: opacity 0.3s ease;#}
{#        }#}

{#        .selectMultiple > div a.notShown:before {#}
{#            width: 28px;#}
{#            transition: width 0.45s cubic-bezier(0.87, -0.41, 0.19, 1.44) 0.2s;#}
{#        }#}

{#        .selectMultiple > div a.notShown i {#}
{#            opacity: 0;#}
{#            transition: all 0.3s ease 0.3s;#}
{#        }#}

{#        .selectMultiple > div a.notShown em {#}
{#            opacity: 0;#}
{#            transform: translate(-6px, 0);#}
{#            transition: all 0.4s ease 0.3s;#}
{#        }#}

{#        .selectMultiple > div a.notShown.shown {#}
{#            opacity: 1;#}
{#        }#}

{#        .selectMultiple > div a.notShown.shown:before {#}
{#            width: 100%;#}
{#        }#}

{#        .selectMultiple > div a.notShown.shown i {#}
{#            opacity: 1;#}
{#        }#}

{#        .selectMultiple > div a.notShown.shown em {#}
{#            opacity: 1;#}
{#            transform: translate(0, 0);#}
{#        }#}

{#        .selectMultiple > div a.remove:before {#}
{#            width: 28px;#}
{#            transition: width 0.4s cubic-bezier(0.87, -0.41, 0.19, 1.44);#}
{#        }#}

{#        .selectMultiple > div a.remove i {#}
{#            opacity: 0;#}
{#            transition: all 0.3s ease;#}
{#        }#}

{#        .selectMultiple > div a.remove em {#}
{#            opacity: 0;#}
{#            transform: translate(-12px, 0);#}
{#            transition: all 0.4s ease;#}
{#        }#}

{#        .selectMultiple > div a.remove.disappear {#}
{#            opacity: 0;#}
{#            transition: opacity 0.5s ease;#}
{#        }#}

{#        .selectMultiple > ul {#}
{#            margin: 0;#}
{#            padding: 0;#}
{#            list-style: none;#}
{#            font-size: 16px;#}
{#            z-index: 9999;#}
{#            position: absolute;#}
{#            top: calc(100% + 5px);#}
{#            left: 0;#}
{#            right: 0;#}
{#            visibility: hidden;#}
{#            opacity: 0;#}
{#            border-radius: 8px;#}
{#            transform: translate(0, 20px) scale(0.8);#}
{#            transform-origin: 0 0;#}
{#            filter: drop-shadow(0 12px 20px rgba(22, 42, 90, 0.08));#}
{#            transition: all 0.4s ease, transform 0.4s cubic-bezier(0.87, -0.41, 0.19, 1.44), filter 0.3s ease 0.2s;#}
{#            max-height: 200px;#}
{#            overflow-y: auto;#}
{#        }#}

{#        .selectMultiple > ul li {#}
{#            color: #1E2330;#}
{#            background: #fff;#}
{#            padding: 12px 16px;#}
{#            cursor: pointer;#}
{#            overflow: hidden;#}
{#            position: relative;#}
{#            transition: background 0.3s ease, color 0.3s ease, transform 0.3s ease 0.3s, opacity 0.5s ease 0.3s, border-radius 0.3s ease 0.3s;#}
{#        }#}

{#        .selectMultiple > ul li:first-child {#}
{#            border-radius: 8px 8px 0 0;#}
{#        }#}

{#        .selectMultiple > ul li:first-child:last-child,#}
{#        .selectMultiple > ul li:last-child:first-child {#}
{#            border-radius: 8px;#}
{#        }#}

{#        .selectMultiple > ul li:last-child {#}
{#            border-radius: 0 0 8px 8px;#}
{#        }#}

{#        .selectMultiple > ul li:hover {#}
{#            background: #bcd35f;#}
{#            color: #000;#}
{#        }#}

{#        .selectMultiple > ul li:after {#}
{#            content: '';#}
{#            position: absolute;#}
{#            top: 50%;#}
{#            left: 50%;#}
{#            width: 6px;#}
{#            height: 6px;#}
{#            background: rgba(0, 0, 0, 0.4);#}
{#            opacity: 0;#}
{#            border-radius: 100%;#}
{#            transform: scale(1) translate(-50%, -50%);#}
{#            transform-origin: 50% 50%;#}
{#        }#}

{#        .selectMultiple > ul li.beforeRemove {#}
{#            border-radius: 0 0 8px 8px;#}
{#        }#}

{#        .selectMultiple > ul li.beforeRemove:first-child {#}
{#            border-radius: 8px;#}
{#        }#}

{#        .selectMultiple > ul li.afterRemove {#}
{#            border-radius: 8px 8px 0 0;#}
{#        }#}

{#        .selectMultiple > ul li.afterRemove:last-child {#}
{#            border-radius: 8px;#}
{#        }#}

{#        .selectMultiple > ul li.remove {#}
{#            transform: scale(0);#}
{#            opacity: 0;#}
{#        }#}

{#        .selectMultiple > ul li.remove:after {#}
{#            animation: ripple 0.4s ease-out;#}
{#        }#}

{#        .selectMultiple > ul li.notShown {#}
{#            display: none;#}
{#            transform: scale(0);#}
{#            opacity: 0;#}
{#            transition: transform 0.35s ease, opacity 0.4s ease;#}
{#        }#}

{#        .selectMultiple > ul li.notShown.show {#}
{#            transform: scale(1);#}
{#            opacity: 1;#}
{#        }#}

{#        .selectMultiple.open > div {#}
{#            box-shadow: 0 4px 20px -1px rgba(22, 42, 90, 0.12);#}
{#        }#}

{#        .selectMultiple.open > div .arrow:before {#}
{#            transform: rotate(-50deg);#}
{#        }#}

{#        .selectMultiple.open > div .arrow:after {#}
{#            transform: rotate(50deg);#}
{#        }#}

{#        .selectMultiple.open > ul {#}
{#            transform: translate(0, 12px) scale(1);#}
{#            opacity: 1;#}
{#            visibility: visible;#}
{#            filter: drop-shadow(0 16px 24px rgba(22, 42, 90, 0.16));#}
{#        }#}

{#        @keyframes ripple {#}
{#            0% {#}
{#                transform: scale(0);#}
{#                opacity: 1;#}
{#            }#}
{#            25% {#}
{#                transform: scale(30);#}
{#                opacity: 1;#}
{#            }#}
{#            100% {#}
{#                opacity: 0;#}
{#                transform: scale(50);#}
{#            }#}
{#        }#}

{#        html {#}
{#            box-sizing: border-box;#}
{#            -webkit-font-smoothing: antialiased;#}
{#        }#}

{#        *,#}
{#        *::before,#}
{#        *::after {#}
{#            box-sizing: inherit;#}
{#        }#}

{#        .tooltip {#}
{#            position: absolute;#}
{#            background-color: white;#}
{#            border: 1px solid #ccc;#}
{#            padding: 5px;#}
{#            pointer-events: none;#}
{#            font-size: 12px;#}
{#        }#}

{#        .form-select[multiple] {#}
{#            height: auto;#}
{#            width: 100%;#}
{#        }#}

{#        .form-select[multiple] option {#}
{#            padding: 10px;#}
{#        }#}
{#    </style>#}

{% endblock %}
